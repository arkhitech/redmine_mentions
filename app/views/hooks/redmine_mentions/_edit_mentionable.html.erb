<%= javascript_include_tag 'jquery.textcomplete.js', :plugin => 'redmine_mentions' %>
<%= javascript_include_tag 'jquery.overlay.js', :plugin => 'redmine_mentions' %>
<%= stylesheet_link_tag 'auto_complete.css', :plugin => 'redmine_mentions' %>
<% regex_find = '/\B'+Setting.plugin_redmine_mentions['trigger']+'(\w*)$/i'%>

<% if @project %>
  <% users = @project.users.to_a.delete_if{|u| (u.type != 'User' || u.mail.empty?)}%>
<% else %>
  <% users = User.active.to_a.delete_if{|u| (u.type != 'User' || u.mail.empty?)}%>
<% end %>
<% users_regex = users.collect{|u| "#{Setting.plugin_redmine_mentions['trigger']}#{u.login}"}.join('|')%>
<% regex_highlight = '/\B('+users_regex+')\b/g' %>
<script>


  textcompleteOptions = [
    {
      mentions: <%=  users.collect{|u| "#{u.firstname} #{u.lastname} - <small>#{u.login}</small>"}.to_json.html_safe %>,
      match: <%=regex_find%>,
      search: function(term, callback) {
        callback($.map(this.mentions, function(mention) {
          return mention.toLowerCase().indexOf(term.toLowerCase()) !== -1 ? mention : null;
        }));
      },
      index: 1,
      replace: function(mention) {
        var parts = mention.split(' - ');
        var name = parts[1].substring(parts[1].lastIndexOf("<small>")+7,parts[1].lastIndexOf("</small>"));
        return '<%=Setting.plugin_redmine_mentions['trigger']%>' + name + ' ';
      }
    }
  ];

  textCompleteOverlayOptions = [
    {
      match: new RegExp(<%=regex_highlight%>),
      css: {
        'background-color': '#C6D5F3',
      }
    }
  ];

  $('#issue_notes,#issue_description').textcomplete(textcompleteOptions).overlay(textCompleteOverlayOptions);


  if (typeof CKEDITOR != 'undefined') {
    CKEDITOR.on("instanceReady", function(event)
    {
      $('#issue_edit_textarea iframe').each(function(index, element) {
        // debugger;
        if ($(element).data('mentionable-active') == 'yes') {
          console.log('textcomplete is already on');
          return;
        }
        $(element).data('mentionable-active', 'yes');
        $(element).contents().find('body').textcomplete(textcompleteOptions); // overlay not working in this case
        console.log('textcomplete is on');
      })
    });

  }

</script>
